package com.bawei.admin.wdcinema.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bw.movie.bean.LoginSubBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_SUB_BEAN".
*/
public class LoginSubBeanDao extends AbstractDao<LoginSubBean, Long> {

    public static final String TABLENAME = "LOGIN_SUB_BEAN";

    /**
     * Properties of entity LoginSubBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Gid = new Property(0, long.class, "gid", true, "_id");
        public final static Property Birthday = new Property(1, long.class, "birthday", false, "BIRTHDAY");
        public final static Property Id = new Property(2, int.class, "id", false, "ID");
        public final static Property LastLoginTime = new Property(3, long.class, "lastLoginTime", false, "LAST_LOGIN_TIME");
        public final static Property NickName = new Property(4, String.class, "nickName", false, "NICK_NAME");
        public final static Property Phone = new Property(5, String.class, "phone", false, "PHONE");
        public final static Property Sex = new Property(6, int.class, "sex", false, "SEX");
        public final static Property HeadPic = new Property(7, String.class, "headPic", false, "HEAD_PIC");
        public final static Property SessionId = new Property(8, String.class, "sessionId", false, "SESSION_ID");
        public final static Property UserId = new Property(9, int.class, "userId", false, "USER_ID");
        public final static Property Pwd = new Property(10, String.class, "pwd", false, "PWD");
        public final static Property Statu = new Property(11, int.class, "statu", false, "STATU");
        public final static Property Mail = new Property(12, String.class, "mail", false, "MAIL");
    }


    public LoginSubBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LoginSubBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_SUB_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: gid
                "\"BIRTHDAY\" INTEGER NOT NULL ," + // 1: birthday
                "\"ID\" INTEGER NOT NULL ," + // 2: id
                "\"LAST_LOGIN_TIME\" INTEGER NOT NULL ," + // 3: lastLoginTime
                "\"NICK_NAME\" TEXT," + // 4: nickName
                "\"PHONE\" TEXT," + // 5: phone
                "\"SEX\" INTEGER NOT NULL ," + // 6: sex
                "\"HEAD_PIC\" TEXT," + // 7: headPic
                "\"SESSION_ID\" TEXT," + // 8: sessionId
                "\"USER_ID\" INTEGER NOT NULL ," + // 9: userId
                "\"PWD\" TEXT," + // 10: pwd
                "\"STATU\" INTEGER NOT NULL ," + // 11: statu
                "\"MAIL\" TEXT);"); // 12: mail
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_SUB_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoginSubBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getGid());
        stmt.bindLong(2, entity.getBirthday());
        stmt.bindLong(3, entity.getId());
        stmt.bindLong(4, entity.getLastLoginTime());
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(5, nickName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
        stmt.bindLong(7, entity.getSex());
 
        String headPic = entity.getHeadPic();
        if (headPic != null) {
            stmt.bindString(8, headPic);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(9, sessionId);
        }
        stmt.bindLong(10, entity.getUserId());
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(11, pwd);
        }
        stmt.bindLong(12, entity.getStatu());
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(13, mail);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoginSubBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getGid());
        stmt.bindLong(2, entity.getBirthday());
        stmt.bindLong(3, entity.getId());
        stmt.bindLong(4, entity.getLastLoginTime());
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(5, nickName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
        stmt.bindLong(7, entity.getSex());
 
        String headPic = entity.getHeadPic();
        if (headPic != null) {
            stmt.bindString(8, headPic);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(9, sessionId);
        }
        stmt.bindLong(10, entity.getUserId());
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(11, pwd);
        }
        stmt.bindLong(12, entity.getStatu());
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(13, mail);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public LoginSubBean readEntity(Cursor cursor, int offset) {
        LoginSubBean entity = new LoginSubBean( //
            cursor.getLong(offset + 0), // gid
            cursor.getLong(offset + 1), // birthday
            cursor.getInt(offset + 2), // id
            cursor.getLong(offset + 3), // lastLoginTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nickName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone
            cursor.getInt(offset + 6), // sex
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // headPic
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sessionId
            cursor.getInt(offset + 9), // userId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // pwd
            cursor.getInt(offset + 11), // statu
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // mail
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoginSubBean entity, int offset) {
        entity.setGid(cursor.getLong(offset + 0));
        entity.setBirthday(cursor.getLong(offset + 1));
        entity.setId(cursor.getInt(offset + 2));
        entity.setLastLoginTime(cursor.getLong(offset + 3));
        entity.setNickName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSex(cursor.getInt(offset + 6));
        entity.setHeadPic(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSessionId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserId(cursor.getInt(offset + 9));
        entity.setPwd(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStatu(cursor.getInt(offset + 11));
        entity.setMail(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LoginSubBean entity, long rowId) {
        entity.setGid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LoginSubBean entity) {
        if(entity != null) {
            return entity.getGid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LoginSubBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
